# Snippets for python file type

global !p
from snippets import docs, syntax, whitespaces
from snippets.langs import python


def ensure_newlines(snip):
	python.ensure_newlines(snip.buffer, snip.snippet_start)
	python.ensure_newlines_after(snip.buffer, snip.snippet_end)
	snip.cursor.preserve()


def after_def(snip):
	prev_line = snip.buffer[snip.line-1].strip()
	return prev_line.startswith('def ') or prev_line.startswith('class ')


def filter_previous_buffer(snip, pattern):
	for line in snip.buffer[0:snip.line]:
		if not re.match(pattern, line):
			return False
	return True
endglobal

snippet "^#" "Python hash-bang" "snip.line == 0" re
#!/usr/bin/env ${1:python}
${2:# -*- coding: utf-8 -*-}
$0
endsnippet

snippet "^i" "Python import" "filter_previous_buffer(snip, '^(#|$|import |from )')" re
import ${0:<package>}
endsnippet

snippet "^import (\S+)" "Python from ... import" br
from ${1:<library>} import `!p snip.rv = match.group(1)`$0
endsnippet

snippet "^from (\S+) import (\S+)" "Python from ... import ... as" br
from `!p snip.rv = match.group(1)` import `!p snip.rv = match.group(2)` as ${0:<alias>}
endsnippet

post_expand "ensure_newlines(snip)"
snippet d "Python function"
def ${1:function_name}($2):
	`!p docs.function_docstring(snip, t[1], t[2])`
	${0:${VISUAL:pass}}
endsnippet

post_expand "ensure_newlines(snip)"
snippet "d([cs])?" "Python method" "not after_def(snip) and whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'class ')" rbe
`!p
def_type = match.group(1)

if def_type:
	if def_type == 's':
		snip.rv = '@staticmethod'
	else:
		snip.rv = '@classmethod'
	snip += ''
else:
	snip.rv = ''

`def ${1:method_name} (self${2/.+/, /}$2):
	`!p docs.function_docstring(snip, t[1], t[2])`
	${0:${VISUAL:pass}}
endsnippet

snippet d "Python docstring" "after_def(snip)" be
`!p docs.function_docstring(snip, t[1], t[2])`
${0:${VISUAL}}
endsnippet

post_expand "ensure_newlines(snip)"
snippet "(s)?c" "Python class" rb
class ${1:ClassName}`!p snip.rv = '(' if t[2] else ''`${2:BaseClassName}`!p snip.rv = ')' if t[2] else ''`:
	`!p docs.function_docstring(snip, t[1], t[4])`
`!p
if match.group(1):
	snip >> 1
	args = docs.parse_args(t[4])
	docs.write_slots_args(args, snip)
	snip.rv += '\n' + snip.mkline('', indent='')
else:
	snip.rv = ''
`
	def __init__(self`!p snip.rv = ', ' if t[4] and not t[4].startswith(',') else ''`$4):
		`!p docs.write_init_body(snip, t[2], t[4])`
		${0:${VISUAL:pass}}
endsnippet

snippet " "Python triple quoted string (double quotes)" b
"""
${1:${VISUAL:Docstring}}
`!p docs.triple_quotes_handle_trailing(snip, '"')`
endsnippet

snippet ' "Python triple quoted string (single quotes)" b
'''
${1:${VISUAL:Docstring}}
`!p docs.triple_quotes_handle_trailing(snip, "'")`
endsnippet

# Doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.$0
endsnippet

snippet s "self" w
self`!p
snip.rv = ''
if len(t[1]) and t[1][:1] != '.':
	snip.rv = '.'
`$1
endsnippet

snippet re.ma "re.match" "not syntax.is_string(snip.cursor)" we
re.match(r'$1', $2)
endsnippet

snippet p "print" b
print(${1:${VISUAL}})
endsnippet

snippet i "Python if" b
if ${1:<condition>}:
	${0:${VISUAL:pass}}
endsnippet

snippet in "if not" bw
if not ${0:<condition>}
endsnippet

snippet im "Python Top-Level script environment" b
if __name__ == `!p snip.rv = docs.get_quoting_style(snip)`__main__`!p snip.rv = docs.get_quoting_style(snip)`:
	${1:${VISUAL:main()}}
endsnippet

snippet e "Python else" b
else:
	${0:${VISUAL:pass}}
endsnippet

snippet el "Python elif" b
elif ${3:<condition>}:
	${4:pass}
endsnippet

snippet t "Python Try / Except" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
$0
endsnippet

snippet f "Python Finally" b
finally:
	${5:pass}
endsnippet

snippet f "for"
for ${1:i} in ${2:<iterable>}:
	${0:${VISUAL:pass}}
endsnippet

snippet w "with" b
with ${1:<expression>}`!p snip.rv = ' as ' if t[2] else ''`${2:var}:
	${0:${VISUAL:pass}}
endsnippet

snippet a "assert" b
assert ${0:${VISUAL:<condition>}}
endsnippet

snippet r "return" bw
return${1/.+/ /}${1:<value>}$0
endsnippet

snippet rf "return False" bw
return False$0
endsnippet

snippet rt "return True" bw
return True$0
endsnippet

snippet roprop "Python Read Only Property" b
@property
def ${1:propertyName} (self):
	${2:return self._$1}$0
endsnippet

snippet rwprop "Python Read/Write property" b
def ${1:propertyName} ():
	`!p snip.rv = docs.triple_quotes(snip) if t[2] else ''
`${2:TODO: Docstring for $1.}`!p
if t[2]:
	snip >> 1

	writer = docs.factory_doc_writer(snip)
	snip.rv += '\n' + snip.mkline('', indent='')
	writer.write_return()
	snip += docs.triple_quotes(snip)
else:
	snip.rv = ''`
	def fget (self):
		return self._$1$0

	def fset (self, value):
		self._$1 = value
	return locals()

$1 = property(**$1(), doc=$1.__doc__)
endsnippet
