# Snippets for unit test python file type

global !p
from snippets import docs, whitespaces


def after_def(snip):
	prev_line = snip.buffer[snip.line-1].strip()
	return prev_line.startswith('def ') or prev_line.startswith('class ')
endglobal

snippet "^ut" "Python unittest test case" br
class Test${1:Name} (${2:unittest.TestCase}):
	`!p snip.rv = docs.triple_quotes(snip)` ${3:Test case docstring.} `!p snip.rv = docs.triple_quotes(snip)`

	def setUp (self):
		${4:pass}

	def tearDown (self):
		${5:pass}

	${0:${VISUAL:pass}}
endsnippet

snippet d "def test" "not after_def(snip) and whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'class\s+\w+\s*\(unittest')" be
def test_${1:MethodName} (self):
	${0:${VISUAL:pass}}
endsnippet

snippet ae "Python Assert Equal" "whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'def test')" be
self.assertEqual(${1:${VISUAL:<condition_1>}}, ${2:<condition_2>})$0
endsnippet

snippet aae "Python Assert Almost Equal" "whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'def test')" be
self.assertAlmostEqual(${1:${VISUAL:<condition_1>}}, ${2:<condition_2>})$0
endsnippet

snippet at "Python Assert True" "whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'def test')" be
self.assertTrue(${1:${VISUAL:<expression>}})
endsnippet

snippet af "Python Assert False" "whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'def test')" be
self.assertFalse(${1:${VISUAL:<expression>}})
endsnippet

snippet ar "Python Assert Raise" "whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'def test')" be
self.assertRaise(${1:<exception>}, ${2:${VISUAL:<function>}}${3/.+/, /}${3:<arguments>})
endsnippet

snippet an "Python Assert is None" "whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'def test')" be
self.assertIsNone(${1:${VISUAL:<expression>}})
endsnippet

snippet ann "Python Assert is Not None" "whitespaces.match_higher_indent(snip.buffer, snip.cursor, 'def test')" be
self.assertIsNotNone(${1:${VISUAL:<expression>}})
endsnippet
