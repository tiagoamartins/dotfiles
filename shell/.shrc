#! sh

# Default keys as emacs style
set -o emacs
# Do not overwrite files with redirected outputs
set -o noclobber

# If linux console set a timeout of 1 hour
[ "$TERM" != linux ] || TMOUT=3600

gethostname() {
	if [ -n "$COMPUTERNAME" ]
	then
		# Windows
		echo "$COMPUTERNAME"
	elif [ -r /proc/sys/kernel/hostname ]
	then
		cat /proc/sys/kernel/hostname
	else
		hostname | cut -d. -f1
	fi
}

hostname=`gethostname`

# Change terminal window title
if [ -t 1 ]
then
	# Set XON/XOFF flow control
	[ ! -x /bin/stty ] || stty -ixon

	if [ -x /usr/bin/tty -o -x /usr/local/bin/tty ]
	then
		# Get TTY name and number
		tty=`tty 2> /dev/null | sed -e 's,^/dev/,,'`
		# Codes:
		# \033    (ESC)    Escape
		# \033]   (ESC ])  Operating System Controls (OSC)
		# \033]1; (OSC 1;) Change Icon Name
		# \033k   (ESC k)  Change title string
		# \033\\  (ESC \)  String terminator
		case "$TERM" in
			screen*|tmux*)
				[ "$STY" -o "$TMUX" ] || h=$hostname
				printf '\033]1;%s@%s\a' "$tty" "$hostname"
				[ -n "$TMUX" ] || printf '\033k%s@%s\033\\' "$tty" "$h"
				unset h;;
			xterm*|rxvt*|Eterm*|kterm*|putty*|dtterm*|ansi*|cygwin*|foot*)
				printf '\033]1;%s@%s\a' "$tty" "$hostname";;
		esac
		unset tty h
	fi
fi

# Set prompt different for root
if [ -z "$PS1" ]
then
	[ "`id | sed -e 's/^uid=\([0-9]*\).*$/\1/'`" -eq 0 ] && PS1='# ' || PS1='$ '
fi
case $PS1 in
	?' ') PS1="$LOGNAME@$hostname `basename "$0" | sed -e 's/^-//'` $PS1";;
esac

unset hostname

function aur-gc()
{
	# Remove unused build files in aur-sync cache
	local XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
	local AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurutils/sync}

	# Assumes build files were retrieved through git(1)
	find "$AURDEST" -name .git -execdir git clean -xf \;

	# Print directories which do not contain a PKGBUILD file
	for d in "$AURDEST"/*
	do
		[[ -f $d/PKGBUILD ]] || printf '%s\n' "$d"
	done
}

function aur-remove()
{
	# aur-remove - remove listed packages from all local repositories

	if [ "$#" -eq 0 ]
	then
		printf 'usage: aur remove package [package ...]\n' >&2
		exit 1
	fi

	aur repo --path-list | while read -r repo_path
	do
		repo-remove "$repo_path" "$@"
		paccache -c "${repo_path%/*}" -rvk0 "$@"
	done
}

function pacman-last()
{
	local count

	if [ "$#" -eq 0 ]
	then
		count=20
	else
		count=$1
	fi

	expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort | tail -n $count
}

# Aliases
alias aur-check='aur repo -d aur --list | aur vercmp'
alias aur-list='comm -12 <(pacman -Qq | sort) <(pacman -Sql aur | sort)'
alias aur-unused='comm -13 <(pacman -Qq | sort) <(pacman -Sql aur | sort)'
alias cls='clear'
alias cp='cp -i'
alias dcm2nii='dcm2niix -v n -z y -f '"'"'%s_%p'"'"
alias gst='git status'
alias gsti='git status --ignored'
alias j='jobs'
alias ll='ls -l'
alias mv='mv -i'
alias rsync='rsync --exclude-from="$HOME/.cvsignore"'
alias tree='tree -C'
alias vi=$VISUAL

if [[ "$OSTYPE" == "darwin"* ]]
then
	alias d='ls -lah'
	alias o='open'
else
	alias d='ls -lah --group-directories-first'
	alias diff='diff --color=auto'
	alias o='xdg-open'
	alias ip='ip -color=auto'
fi

if [ -x /usr/bin/dircolors -o -x /usr/local/bin/dircolors ]
then
	# Linux coloring
	eval `dircolors -b "$HOME/.dir_colors"`
	# Convert bold to bright colors
	case "$TERM" in
		xterm*|screen*|tmux*|foot*) LS_COLORS=`echo "$LS_COLORS" | sed -e 's/01;3/00;9/g'`;;
	esac
	alias ls='ls -hF --color=auto'
else
	# BSD coloring
	alias ls='CLICOLOR=1 LSCOLORS=ExGxFxdxCxfxDxabadacad ls -hF'
fi

if ! grep --color 2>&1 | grep un > /dev/null
then
	alias grep='grep --color=auto --exclude=".*.swp" --exclude="*~" --exclude=tags'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" \
	"$(history | tail -n1 | sed -e '"'"'s/^\s*[0-9]\+\s*//; s/[;&|]\s*alert$//'"'"')"'

# Alias commands in tiago script
for cmd in `$HOME/.local/bin/tiago aliases`
do
	alias $cmd="\"\$HOME\"/.local/bin/tiago $cmd"
done
unset cmd

# Source local shrc file if it exists
[ ! -r "$HOME/.shrc.local" ] || . "$HOME/.shrc.local"
