#!/bin/sh
#
# Usage: yank [FILE...]
#
# Copies the contents of given files (or stdin if no files are given) to the
# terminal that runs this program. If running inside tmux(1), then it also
# copies the given contents into tmux's current clipboard buffer. If running
# inside X11, then it also copies to the X11 clipboard.
#
# The copy to clipboard is done using OSC 52 escape sequence. The maximum
# length of an OSC 52 escape sequence is 100,000 bytes, of which 7 bytes are
# occupied by a "\e]52;c;" header, 1 byte by a "\a" footer, and 99,992 bytes by
# the base64-encoded result of 74,994 bytes of copyable text. For more than the
# allowed length it emits a warning (on stderr) about the number of bytes
# dropped.

buffer=$(cat "$@")

function input()
{
	printf %s "$buffer"
}

function known()
{
	command -v "$1" >/dev/null
}

function maybe()
{
	known "$1" && input | "$@"
}

function alive()
{
	known "$1" && "$@" >/dev/null 2>&1
}

# copy to tmux
test -n "$TMUX" && maybe tmux load-buffer -

# copy via X11 or pbcopy
if [[ "$OSTYPE" == "linux-gnu"* ]] && test -n "$DISPLAY"
then
	maybe wl-copy -n \
		|| alive xhost && maybe xsel --input --clipboard \
		|| maybe xclip -in -selection clipboard
elif [[ "$OSTYPE" == "darwin"* ]]
then
	maybe pbcopy
fi

# copy via OSC 52
function printf_escape()
{
	esc=$1

	if test -n "$TMUX"
	then
		esc="\ePtmux;\e$esc\e\\"
	elif test -z "${TERM##screen*}"
	then
		esc="\eP\e$esc\e\\"
	fi

	printf "$esc"
}

max=74994
len=$(input | wc -c)
test $len -gt $max && echo "$0: input is $((len - max)) bytes too long" >&2

if test -n "$SSH_TTY"
then
	# refresh SSH_TTY on the attached tmux session
	test -n "$TMUX" && eval $(tmux show-environment SSH_TTY)
	exec > $SSH_TTY
fi

printf_escape "\e]52;c;$(input | head -c $max | base64 | tr -d '\r\n')\a"
