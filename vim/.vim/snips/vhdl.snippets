# Snippets for vhdl file type

global !p
try:
	from snippets.project import *

except ImportError:
	raise ImportError('Error while importing dependencies')

def write_header(snip):
	snip.rv = '-- ' + get_title(snip.basename)
	snip += '--'
	snip += '-- Author: ' + get_project_author()
	snip += '-- Copyright: ' + get_copyright()
	snip += '--'
	snip += '-- <Extended Description>'

endglobal

snippet _skel "VHDL module file" b
`!p write_header(snip)`

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity `!v expand('%:t:r')` is${2/(--.*|\w.*)|(.*)/(?1:
	generic \(
		:)/}${2:-- Add entity generics here}${2/(--.*|\w.*)|(.*)/(?1:
	\);:)/}
	port (
		${1:-- Add entity ports here}
	);
end entity `!v expand('%:t:r')`;

architecture ${3:Main} of `!v expand('%:t:r')` is
	${4:-- Add architecture declarations here}
begin
	${0:-- Add architecture internals here}
end architecture $3;
endsnippet

snippet l "VHDL IEEE libraries" b
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

$0
endsnippet

snippet e "VHDL entity" b
entity ${1:Name} is${3/(--.*|\w.*)|(.*)/(?1:
	generic \(
		:)/}${3:-- Add entity generics here}${3/(--.*|\w.*)|(.*)/(?1:
	\);:)/}
	port (
		${2:-- Add entity ports here}
	);
end entity $1;

$0
endsnippet

snippet arch "VHDL architecture" b
architecture ${1:Main} of ${2:`!v expand('%:t:r')`} is
	${3:-- Add architecture declarations here}
begin
	${0:${VISUAL:-- Add architecture internals here}}
end architecture $1;
endsnippet

snippet g "VHDL entity generic" b
${1:NAME} : ${2:integer}${3/(.*)/(?1: \:= :)/}${3:0};$0
endsnippet

snippet p "VHDL entity input port" b
${1:name} : ${2:in} ${3:std_logic};$0
endsnippet

snippet c "VHDL constant" b
constant ${1:NAME} : ${2:integer}${3/(.*)/(?1: \:= :)/}${3:${2/(std_logic)(_vector)?.*|.*/(?1:(?2:\(others => '0'\):'0'):0)/}};$0
endsnippet

snippet v "VHDL variable" b
variable ${1:name} : ${2:integer}${3/(.*)/(?1: \:= :)/}${3:${2/(std_logic)(_vector)?.*|.*/(?1:(?2:\(others => '0'\):'0'):0)/}};$0
endsnippet

snippet s "VHDL signal" b
signal ${1:name} : ${2:integer};$0
endsnippet

snippet a "VHDL alias" b
alias ${1:name} : ${2:integer} is ${3:object};
endsnippet

snippet t "VHDL type" b
type ${1:identifier} is ${2:${3/(.*)/(?1:\(:)/}${3:<list>}${3/(.*)/(?1:\):)/}};$0
endsnippet

snippet st "VHDL subtype" b
subtype ${1:identifier} is ${2:subtype_indication};$0
endsnippet

snippet assert "VHDL assert" b
assert ${1:${VISUAL:<condition>}}
	report "${2:Assertion text here!}" severity ${3:error};$0
endsnippet

snippet f "VHDL function" b
function ${1:name} (${2:${3:input} : ${4:std_logic}}) return ${5:std_logic} is
	${6:-- Add variables here}
begin
	${0:${VISUAL:-- Add function internals here}}
end function $1;
endsnippet

snippet proc "VHDL process" b
${1:Label}${1/(.*)/(?1:\: :)/}process (${2:<sensitivity_list>})${3/(.*)/(?1:
	:)/}${3:-- Add declarations here}
begin
	${0:${VISUAL:-- Add process internals here}}
end process${1/(.*)/(?1: :)/}$1;
endsnippet

snippet ifg "VHDL if generate" b
${1:Label}: if ${2:<conditions>} generate
	${0:${VISUAL:-- Add statements here}}
end generate $1;
endsnippet

snippet forg "VHDL for generate" b
${1:Label}: for ${2:i} in ${3:${4:0} ${5:to} ${6:MAX}} generate
	${0:${VISUAL:-- Add statements here}}
end generate $1;
endsnippet

snippet block "VHDL block" b
${1:Label}: block is${2/(.*)/(?1:
	:)/}${2:-- Add declarations here}
begin
	${0:${VISUAL:-- Add statements here}}
end block $1;
endsnippet

snippet if "VHDL if" b
if ${1:<conditions>} then
	${0:${VISUAL:-- Add statements here}}
end if;
endsnippet

snippet elsif "VHDL elsif" b
elsif ${1:<conditions>} then
	${0:${VISUAL:-- Add statements here}}
endsnippet

snippet else "VHDL else" b
else
	${0:${VISUAL:-- Add statements here}}
endsnippet

snippet for "VHDL for" b
for ${1:i} in ${2:${3:0} ${4:to} ${5:MAX}} loop
	${0:${VISUAL:-- Add statements here}}
end loop;
endsnippet

snippet case "VHDL case" b
case ${1:<test subject>} is
	${0:${VISUAL:-- Add cases here}}`!p snip.rv = '\n'`
	when others =>
		${2:-- Add statements for default case here}`!p snip.rv = '\n'`
end case;
endsnippet

snippet rise "VHDL rising edge" w
rising_edge(${0:${VISUAL:<signal>}})
endsnippet

snippet fall "VHDL falling edge" w
falling_edge(${0:${VISUAL:<signal>}})
endsnippet

snippet vec "VHDL std_logic_vector" w
std_logic_vector${1/(.*)/(?1:\(:)/}${1:${VISUAL:<range>}}${1/(.*)/(?1:\):)/}$0
endsnippet

snippet l "VHDL std_logic" w
std_logic$0
endsnippet

snippet o "VHDL others" w
(others => ${1:'0'})$0
endsnippet

snippet dt "VHDL downto range" w
${1:HIGHER_BIT} downto ${2:LOWER_BIT}
endsnippet

snippet to "VHDL to range" w
${1:LOWER_BIT} to ${2:HIGHER_BIT}
endsnippet

snippet when "VHDL when" w
when ${1:CONDITION} =>
	${0:${VISUAL:-- Add statements here}}
endsnippet

snippet fsm "VHDL Finite State Machine" b
type ${3:tState} is (
	${2:sIdle}
);`!p snip.rv = '\n'`
${1:Label}: block is
	signal ${4:state}     : $3;
	signal ${5:nextState} : $3;
begin
	${6:FsmNextState}: process ($4)
	begin
		case $4 is`!p
snip >> 3
states = t[2].split(',')
states = [state.strip(' \n') for state in states if state]

if len(states):
	for state in states:
		snip += 'when {0} =>'.format(state)
		snip >> 1
		snip += '{0} <= {1};\n'.format(t[5], states[0])
		snip << 1
	snip += 'when others =>'
	snip >> 1
	snip += '{0} <= {1};\n'.format(t[5], states[0])
	snip << 1
else:
	snip.rv = ''`
		end case;
	end process $6;`!p snip.rv = '\n'`
	${7:FsmFlipFlop}: process (iClk)
	begin
		if rising_edge(iClk) then
			if iRst_n = '0' then
				$4 <= `!p snip.rv = t[2].split(',')[0]`;
			else
				$4 <= $5;
			end if;
		end if;
	end process $7;`!p snip.rv = '\n'`
	${8:FsmOutput}: process ($4)
	begin
		-- Default Values`!p snip.rv = '\n'`
		-- Specific Values
		case $4 is`!p
snip >> 3
states = t[2].split(',')
states = [state.strip(' \n') for state in states if state]

if len(states):
	for state in states:
		snip += 'when {0} =>'.format(state)
		snip >> 1
		snip += 'null;\n'
		snip << 1
	snip += 'when others =>'
	snip >> 1
	snip += 'null;\n'
	snip << 1
else:
	snip.rv = ''`
		end case;
	end process $8;`!p snip.rv = '\n'`
	${0:${VISUAL:-- Add statements here}}
end block $1;
endsnippet
