" ---------- Vim Defaults ----------
let mapleader = '\'             " Leader is backslash

if &loadplugins && !has('packages')
    if has("vim_starting")
        runtime! pack/vendor/opt/pathogen/autoload/pathogen.vim
    endif

    execute pathogen#infect()
endif

filetype plugin on              " Enable plugins to detect file types

" ---------- Colors ----------
syntax enable                   " Enable syntax processing
set background=dark             " Set a dark background profile
try
    let g:hybrid_custom_term_colors = 1
    colorscheme hybrid              " Set color scheme
catch
    colorscheme peachpuff
endtry

" Only do this part when compiled with support for autocommands
if has("autocmd")
    " Enable file type detection
    filetype on

    " Syntax of these languages is fussy over tabs vs. spaces
    autocmd FileType yaml setlocal expandtab softtabstop=4 shiftwidth=4

    " Add wrap to Markdown files
    autocmd FileType markdown setlocal wrap

    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml

    " Vim files
    autocmd FileType vim setlocal expandtab softtabstop=4 shiftwidth=4
endif

" ---------- Indentation ----------
filetype indent on              " Indent depends on filetype

augroup VhdlTabular
    autocmd!
    autocmd FileType vhdl nnoremap <buffer> <leader>a= :Tabularize /^[^<=]*\zs<=<CR>
    autocmd FileType vhdl vnoremap <buffer> <leader>a= :Tabularize /^[^<=]*\zs<=<CR>
    autocmd FileType vhdl nnoremap <buffer> <leader>a: :Tabularize /^[^:]*\zs:<CR>
    autocmd FileType vhdl vnoremap <buffer> <leader>a: :Tabularize /^[^:]*\zs:<CR>
augroup END

" ---------- Spelling ----------
if has("spell")
    " Change menu color
    highlight PmenuSel ctermfg=black ctermbg=lightgray

    " Set spelling for mail, gitcommit and markdown
    autocmd FileType mail setlocal spell
    autocmd FileType gitcommit setlocal spell
    autocmd FileType markdown setlocal spell
endif

" ---------- Airline ----------
let g:airline_theme = "hybridline"
let g:airline_powerline_fonts = 1                   " Disable use of powerline fonts

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_symbols.maxlinenr='≡'
let g:airline_symbols.crypt = 'œ'
let g:airline_symbols.notexists = '∅'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline#extensions#branch#enabled = 1

let g:airline#extensions#tabline#enabled = 1        " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ":t"    " Show just the filename
let g:airline#extensions#tabline#tab_nr_type = 2    " Show splits and tab numbers

let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1

let g:airline#extensions#ale#enabled = 1

" ---------- ALE ----------
let g:ale_sign_error = 'X'
let g:ale_sign_warning = 'Δ'

let g:ale_python_flake8_options='--ignore=W503'
let g:ale_c_gcc_options='-std=gnu11 -Wall'

let g:ale_linters = {
\   'cpp': ['gcc']
\}

autocmd User ProjectionistActivate call s:activate()
function! s:activate() abort
    for [root, value] in projectionist#query('cflags')
        let b:ale_c_gcc_options = value
        let b:ale_cpp_gcc_options = value
        break
    endfor
endfunction

autocmd FileType vhdl call s:set_simulation_dir()
function! s:set_simulation_dir() abort
    if exists('b:projectionist') && !empty('b:projectionist')
        for [root, value] in projectionist#query('simulation')
            let sim_dir = '"' . expand(root . '/' . value) . '"'
            break
        endfor
    elseif isdirectory('work')
        let sim_dir = 'work'
    endif

    if exists('sim_dir')
        let b:ale_vhdl_vcom_options = '-2008 -work ' . sim_dir
        let b:ale_vhdl_ghdl_options = '--std=08 --workdir=' . sim_dir
    endif
endfunction

" ---------- Commentary ----------
autocmd FileType vhdl set commentstring=--\ %s
autocmd FileType verilog set commentstring=\/\/\ %s
autocmd FileType systemverilog set commentstring=\/\/\ %s
autocmd FileType matlab set commentstring=\%\ %s

" ---------- UltiSnips ----------
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<Tab>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" ---------- Functions ----------
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" ---------- Mail ----------
" Format Options:
" a Automatic formatting of paragraphs.  Every time text is inserted or
"   deleted the paragraph will be reformatted.
" w Trailing white space indicates a paragraph continues in the next line.
"   A line that ends in a non-white character ends a paragraph.
autocmd FileType mail setlocal formatoptions+=aw

" ---------- Local Configurations ----------
if filereadable(glob($MYVIMRC . ".local"))
    source $MYVIMRC.local
endif

" ---------- ARM Assembly ----------
autocmd BufNewFile,BufRead *.s,*.S set filetype=arm " arm = armv6/7
